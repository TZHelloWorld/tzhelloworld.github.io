<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>git基础知识</title>
    <link href="/git-note-01.html"/>
    <url>/git-note-01.html</url>
    
    <content type="html"><![CDATA[<h1 id="git的基础概念"><a href="#git的基础概念" class="headerlink" title="git的基础概念"></a>git的基础概念</h1>]]></content>
    
    
    <categories>
      
      <category>技术栈</category>
      
      <category>Git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hexo内容编写</title>
    <link href="/hexo-contents.html"/>
    <url>/hexo-contents.html</url>
    
    <content type="html"><![CDATA[<div class="note note-success">            <p>这个主要是用于一些 <code>markdown</code> 和 <code>html</code> 编写内容的参考（包括原生的和自定义扩展的）</p>          </div><h1 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h1><p>代码块实现方式有两种：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs markdown">&#123;% codeblock lang:python %&#125;<br>import torch<br>torch.tensor([1,2,3],device=&quot;cuda&quot;)<br>&#123;% endcodeblock %&#125;<br></code></pre></td></tr></table></figure><p>或者使用<span class="label label-success">&#96;&#96;&#96;</span>这种<code>markdown</code>语法来编写使用，渲染效果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br>torch.tensor([<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>],device=<span class="hljs-string">&quot;cuda&quot;</span>)<br></code></pre></td></tr></table></figure><h1 id="选项卡支持多代码切换"><a href="#选项卡支持多代码切换" class="headerlink" title="选项卡支持多代码切换"></a>选项卡支持多代码切换</h1><h2 id="单独使用"><a href="#单独使用" class="headerlink" title="单独使用"></a>单独使用</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs markdown">&#123;% tabs Name, 1 %&#125;<br><br>&lt;!-- tab python--&gt;<br>因为冲突，这里添加 python 代码块<br><br>&lt;!-- endtab --&gt;<br><br><br>&lt;!-- tab C++--&gt;<br>因为冲突，这里添加 c++ 代码块<br>&lt;!-- endtab --&gt;<br><br>&lt;!-- tab Java--&gt;<br>因为冲突，这里添加 java 代码块<br>&lt;!-- endtab --&gt;<br><br>&#123;% endtabs %&#125;<br><br></code></pre></td></tr></table></figure><p>渲染如下：</p><div class="tabs" id="name"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#name-1">python</button></li><li class="tab"><button type="button" data-href="#name-2">C++</button></li><li class="tab"><button type="button" data-href="#name-3">Java</button></li></ul><div class="tab-content"><div class="tab-pane active" id="name-1"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Hello World&quot;</span>)<br></code></pre></td></tr></table></figure></div><div class="tab-pane" id="name-2"><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    cout &lt;&lt; <span class="hljs-string">&quot;Hello World&quot;</span> &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></div><div class="tab-pane" id="name-3"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloWorld</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Hello World&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></div></div></div><h2 id="配合折叠块使用"><a href="#配合折叠块使用" class="headerlink" title="配合折叠块使用"></a>配合折叠块使用</h2><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs django"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">details</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">summary</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span>代码块切换折叠隐藏<span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">summary</span>&gt;</span></span><br><span class="language-xml"></span><span class="hljs-template-tag">&#123;% <span class="hljs-name">tabs</span> Name, 1 %&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-comment">&lt;!-- tab python--&gt;</span></span><br><span class="language-xml">因为冲突，这里添加 python 代码块</span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-comment">&lt;!-- endtab --&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-comment">&lt;!-- tab C++--&gt;</span></span><br><span class="language-xml">因为冲突，这里添加 c++ 代码块</span><br><span class="language-xml"><span class="hljs-comment">&lt;!-- endtab --&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-comment">&lt;!-- tab Java--&gt;</span></span><br><span class="language-xml">因为冲突，这里添加 java 代码块</span><br><span class="language-xml"><span class="hljs-comment">&lt;!-- endtab --&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-tag">&#123;% <span class="hljs-name">endtabs</span> %&#125;</span><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">details</span>&gt;</span></span><br><span class="language-xml"></span><br></code></pre></td></tr></table></figure><p>渲染如下：</p><details><summary><b>代码块切换折叠隐藏</b></summary><div class="tabs" id="name"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#name-1">python</button></li><li class="tab"><button type="button" data-href="#name-2">C++</button></li><li class="tab"><button type="button" data-href="#name-3">Java</button></li></ul><div class="tab-content"><div class="tab-pane active" id="name-1"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Hello World&quot;</span>)<br></code></pre></td></tr></table></figure></div><div class="tab-pane" id="name-2"><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    cout &lt;&lt; <span class="hljs-string">&quot;Hello World&quot;</span> &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></div><div class="tab-pane" id="name-3"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloWorld</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Hello World&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></div></div></div></details><h2 id="配合高亮块使用"><a href="#配合高亮块使用" class="headerlink" title="配合高亮块使用"></a>配合高亮块使用</h2><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs django"><span class="hljs-template-tag">&#123;% <span class="hljs-name">note</span> success %&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><br><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-tag">&#123;% <span class="hljs-name">tabs</span> Name, 1 %&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-comment">&lt;!-- tab python--&gt;</span></span><br><span class="language-xml">因为冲突，这里添加 python 代码块</span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-comment">&lt;!-- endtab --&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-comment">&lt;!-- tab C++--&gt;</span></span><br><span class="language-xml">因为冲突，这里添加 c++ 代码块</span><br><span class="language-xml"><span class="hljs-comment">&lt;!-- endtab --&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-comment">&lt;!-- tab Java--&gt;</span></span><br><span class="language-xml">因为冲突，这里添加 java 代码块</span><br><span class="language-xml"><span class="hljs-comment">&lt;!-- endtab --&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-tag">&#123;% <span class="hljs-name">endtabs</span> %&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-tag">&#123;% <span class="hljs-name">endnote</span> %&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><br></code></pre></td></tr></table></figure><p>渲染如下：</p><div class="note note-success">            <div class="tabs" id="name"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#name-1">python</button></li><li class="tab"><button type="button" data-href="#name-2">C++</button></li><li class="tab"><button type="button" data-href="#name-3">Java</button></li></ul><div class="tab-content"><div class="tab-pane active" id="name-1"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Hello World&quot;</span>)<br></code></pre></td></tr></table></figure></div><div class="tab-pane" id="name-2"><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    cout &lt;&lt; <span class="hljs-string">&quot;Hello World&quot;</span> &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></div><div class="tab-pane" id="name-3"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloWorld</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Hello World&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></div></div></div>          </div><h1 id="组图"><a href="#组图" class="headerlink" title="组图"></a>组图</h1><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs markdown">&#123;% gi total n1-n2-... %&#125;<br>  ![](<span class="hljs-link">url</span>)<br>  ![](<span class="hljs-link">url</span>)<br>  ![](<span class="hljs-link">url</span>)<br>  ![](<span class="hljs-link">url</span>)<br>  ![](<span class="hljs-link">url</span>)<br>&#123;% endgi %&#125;<br></code></pre></td></tr></table></figure><p>说明：</p><ul><li><code>total</code>:表示图片总数量</li><li><code>n1-n2-...</code>：表示每行的图片数量，可以省略，默认一行最多3张，并且所有的和等于<code>total</code>，否则按默认样式。</li></ul><h1 id="高亮块（便签）"><a href="#高亮块（便签）" class="headerlink" title="高亮块（便签）"></a>高亮块（便签）</h1><p>在 <code>markdown</code> 中加入如下的代码来使用便签：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown">&#123;% note success %&#125;<br>文字 或者 <span class="hljs-code">`markdown`</span> 均可<br>&#123;% endnote %&#125;<br></code></pre></td></tr></table></figure><p>或者使用 <code>HTML</code> 形式：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;note note-success&quot;</span>&gt;</span>标签<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><p>可选择的有：</p><p class="note note-primary">primary</p><p class="note note-secondary">secondary</p><p class="note note-success">success</p><p class="note note-danger">danger</p><p class="note note-warning">warning</p><p class="note note-info">info</p><p class="note note-light">light</p><h1 id="行内标签"><a href="#行内标签" class="headerlink" title="行内标签"></a>行内标签</h1><p>在 <code>markdown</code> 中加入如下的代码来使用 <code>Label</code>：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">&#123;% label primary @text %&#125;<br></code></pre></td></tr></table></figure><p>或者使用 <code>HTML</code> 形式：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;label label-primary&quot;</span>&gt;</span>Label<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br></code></pre></td></tr></table></figure><p>可选 <code>Label</code>：</p><ol><li><span class="label label-primary">primary</span></li><li><span class="label label-default">default</span></li><li><span class="label label-info">info</span></li><li><span class="label label-success">success</span></li><li><span class="label label-warning">warning</span></li><li><span class="label label-dange">dange</span></li></ol><h1 id="折叠块"><a href="#折叠块" class="headerlink" title="折叠块"></a>折叠块</h1><h2 id="HTML使用方式"><a href="#HTML使用方式" class="headerlink" title="HTML使用方式"></a>HTML使用方式</h2><p>Fluid 没有原生的折叠块支持，但是可以通过内嵌 <code>HTML</code> 代码实现，可以用使用 <code>Tag</code> 便签包裹：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">details</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">summary</span>&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span></span>折叠快，点击查看详细<span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">summary</span>&gt;</span></span><br>这个默认不被打开<br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">details</span>&gt;</span></span><br><br></code></pre></td></tr></table></figure><p>渲染如下：</p><details><summary><b>折叠快，点击查看详细</b></summary>这个默认不被打开</details><h2 id="配合高亮块使用-1"><a href="#配合高亮块使用-1" class="headerlink" title="配合高亮块使用"></a>配合高亮块使用</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs markdown">&#123;% note secondary %&#125;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">details</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">summary</span>&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span></span>折叠快，点击查看详细<span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">summary</span>&gt;</span></span><br>这个默认不被打开<br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">details</span>&gt;</span></span><br>&#123;% endnote %&#125;<br></code></pre></td></tr></table></figure><p>渲染如下：</p><div class="note note-secondary">            <details><summary><b>折叠快，点击查看详细</b></summary>这个默认不被打开</details>          </div><h2 id="配合代码块使用"><a href="#配合代码块使用" class="headerlink" title="配合代码块使用"></a>配合代码块使用</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">details</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">summary</span>&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span></span>折叠快，点击查看详细<span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">summary</span>&gt;</span></span><br><br><span class="hljs-strong">**因为冲突，这里添加代码块**</span><br><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">details</span>&gt;</span></span><br></code></pre></td></tr></table></figure><details><summary>OpenRLHF 的 VLLM Worker Wrap</summary><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">WorkerWrap</span>(<span class="hljs-title class_ inherited__">Worker</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">init_process_group</span>(<span class="hljs-params">self, master_address, master_port, rank_offset, world_size, group_name, backend=<span class="hljs-string">&quot;nccl&quot;</span></span>):<br>        <span class="hljs-string">&quot;&quot;&quot;Init torch process group for model weights update&quot;&quot;&quot;</span><br>        <span class="hljs-keyword">assert</span> torch.distributed.is_initialized(), <span class="hljs-string">f&quot;default torch process group must be initialized&quot;</span><br>        <span class="hljs-keyword">assert</span> group_name != <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">f&quot;group name must not be empty&quot;</span><br><br>        rank = torch.distributed.get_rank() + rank_offset<br>        <span class="hljs-variable language_">self</span>._model_update_group = init_process_group(<br>            backend=backend,<br>            init_method=<span class="hljs-string">f&quot;tcp://<span class="hljs-subst">&#123;master_address&#125;</span>:<span class="hljs-subst">&#123;master_port&#125;</span>&quot;</span>,<br>            world_size=world_size,<br>            rank=rank,<br>            group_name=group_name,<br>        )<br>        <span class="hljs-built_in">print</span>(<br>            <span class="hljs-string">f&quot;init_process_group: master_address=<span class="hljs-subst">&#123;master_address&#125;</span>, master_port=<span class="hljs-subst">&#123;master_port&#125;</span>, &quot;</span>,<br>            <span class="hljs-string">f&quot;rank=<span class="hljs-subst">&#123;rank&#125;</span>, world_size=<span class="hljs-subst">&#123;world_size&#125;</span>, group_name=<span class="hljs-subst">&#123;group_name&#125;</span>&quot;</span>,<br>        )<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">update_weight</span>(<span class="hljs-params">self, name, dtype, shape, empty_cache=<span class="hljs-literal">False</span></span>):<br>        <span class="hljs-string">&quot;&quot;&quot;Broadcast weight to all vllm workers from source rank 0 (actor model)&quot;&quot;&quot;</span><br>        <span class="hljs-keyword">if</span> torch.distributed.get_rank() == <span class="hljs-number">0</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;update weight: <span class="hljs-subst">&#123;name&#125;</span>, dtype: <span class="hljs-subst">&#123;dtype&#125;</span>, shape: <span class="hljs-subst">&#123;shape&#125;</span>&quot;</span>)<br><br>        <span class="hljs-keyword">assert</span> dtype == <span class="hljs-variable language_">self</span>.model_config.dtype, <span class="hljs-string">f&quot;mismatch dtype: src <span class="hljs-subst">&#123;dtype&#125;</span>, dst <span class="hljs-subst">&#123;self.model_config.dtype&#125;</span>&quot;</span><br>        weight = torch.empty(shape, dtype=dtype, device=<span class="hljs-string">&quot;cuda&quot;</span>)<br>        torch.distributed.broadcast(weight, <span class="hljs-number">0</span>, group=<span class="hljs-variable language_">self</span>._model_update_group)<br><br>        <span class="hljs-variable language_">self</span>.model_runner.model.load_weights(weights=[(name, weight)])<br></code></pre></td></tr></table></figure></details><h2 id="另一种方式"><a href="#另一种方式" class="headerlink" title="另一种方式"></a>另一种方式</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs markdown">class类主要分为下面几种方法：<br><span class="hljs-bullet">1.</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">details</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">summary</span>&gt;</span></span>function1:主要用于xxx<span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">summary</span>&gt;</span></span><br><span class="hljs-strong">**因为冲突，这里添加代码块1**</span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">details</span>&gt;</span></span><br><br><span class="hljs-bullet">2.</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">details</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">summary</span>&gt;</span></span>function2:主要用于xxx<span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">summary</span>&gt;</span></span><br><span class="hljs-strong">**因为冲突，这里添加代码块2**</span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">details</span>&gt;</span></span><br><br><br><span class="hljs-bullet">3.</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">details</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">summary</span>&gt;</span></span>function3:主要用于xxx<span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">summary</span>&gt;</span></span><br><span class="hljs-strong">**因为冲突，这里添加代码块3**</span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">details</span>&gt;</span></span><br><br></code></pre></td></tr></table></figure><p>渲染如下：</p><p>class类主要分为下面几种方法：</p><ol><li><details><summary>function1: 主要用于xxx</summary><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">function1</span>():<br>    <span class="hljs-keyword">pass</span><br></code></pre></td></tr></table></figure></details></li><li><details><summary>function2: 主要用于xxx</summary><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">function2</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;hello world&quot;</span>)<br></code></pre></td></tr></table></figure></details></li><li><details><summary>function3: 主要用于xxx</summary><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">function3</span>():<br>    <span class="hljs-keyword">pass</span><br></code></pre></td></tr></table></figure></details></li></ol><h1 id="其他待补充。。。"><a href="#其他待补充。。。" class="headerlink" title="其他待补充。。。"></a>其他待补充。。。</h1>]]></content>
    
    
    <categories>
      
      <category>技术栈</category>
      
      <category>博客</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hexo个性化之选项卡功能添加</title>
    <link href="/hexo-tabs.html"/>
    <url>/hexo-tabs.html</url>
    
    <content type="html"><![CDATA[<h1 id="功能演示"><a href="#功能演示" class="headerlink" title="功能演示"></a>功能演示</h1><p>在 <code>markdown</code> 中使用如下：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-section"># 默认选择第2个</span><br>&#123;% tabs Name, 2 %&#125;<br><br>&lt;!-- tab first Tab--&gt;<br> tab 1 content<br>&lt;!-- endtab --&gt;<br><br><br>&lt;!-- tab Second Tab--&gt;<br> tab 2 content<br>&lt;!-- endtab --&gt;<br><br><br>&lt;!-- tab Third Tab--&gt;<br> tab 3 content<br>&lt;!-- endtab --&gt;<br><br>&#123;% endtabs %&#125;<br></code></pre></td></tr></table></figure><p>最终渲染的内容如下：</p><div class="tabs" id="name"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#name-1">first Tab</button></li><li class="tab active"><button type="button" data-href="#name-2">Second Tab</button></li><li class="tab"><button type="button" data-href="#name-3">Third Tab</button></li></ul><div class="tab-content"><div class="tab-pane" id="name-1"><p> tab 1 content</p></div><div class="tab-pane active" id="name-2"><p> tab 2 content</p></div><div class="tab-pane" id="name-3"><p> tab 3 content</p></div></div></div><h1 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h1><p>首先需要了解下，对于渲染的原理：<code>hexo</code> 将 <code>markdown</code> 中的语法标签转换成对应的 <code>html</code> 结构, 然后为转换成的 <code>html</code> 内容添加样式和动画，所以实现的时候需要：</p><ol><li>markdown中标签解析，并生成对一个的选项卡HTML的结构</li><li>javascript关于生成的选项卡的点击切换逻辑</li><li>css样式美化操作</li></ol><h2 id="将对应的标签转换成html结构"><a href="#将对应的标签转换成html结构" class="headerlink" title="将对应的标签转换成html结构"></a>将对应的标签转换成html结构</h2><p>追踪hexo代码，其实现逻辑主要在 <code>/themes/fluid/scripts/tags</code> 目录下，在这个目录下创建一个<code>tabs.js</code> 的文件，并添加内容：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-meta">&#x27;use strict&#x27;</span>;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">postTabs</span>(<span class="hljs-params">args, content</span>) &#123;<br>  <span class="hljs-keyword">var</span> tabBlock = <span class="hljs-regexp">/&lt;!--\s*tab (.*?)\s*--&gt;\n([\w\W\s\S]*?)&lt;!--\s*endtab\s*--&gt;/g</span>;<br><br>  args = args.<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27; &#x27;</span>).<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;,&#x27;</span>);<br>  <span class="hljs-keyword">var</span> tabName = args[<span class="hljs-number">0</span>];<br>  <span class="hljs-keyword">var</span> tabActive = <span class="hljs-title class_">Number</span>(args[<span class="hljs-number">1</span>]) || <span class="hljs-number">0</span>;<br><br>  <span class="hljs-keyword">var</span> matches = [];<br>  <span class="hljs-keyword">var</span> match;<br>  <span class="hljs-keyword">var</span> tabId = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">var</span> tabNav = <span class="hljs-string">&#x27;&#x27;</span>;<br>  <span class="hljs-keyword">var</span> tabContent = <span class="hljs-string">&#x27;&#x27;</span>;<br><br>  !tabName &amp;&amp; hexo.<span class="hljs-property">log</span>.<span class="hljs-title function_">warn</span>(<span class="hljs-string">&#x27;Tabs block must have unique name!&#x27;</span>);<br><br>  <span class="hljs-keyword">while</span> ((match = tabBlock.<span class="hljs-title function_">exec</span>(content)) !== <span class="hljs-literal">null</span>) &#123;<br>    matches.<span class="hljs-title function_">push</span>(match[<span class="hljs-number">1</span>]);<br>    matches.<span class="hljs-title function_">push</span>(match[<span class="hljs-number">2</span>]);<br>  &#125;<br><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; matches.<span class="hljs-property">length</span>; i += <span class="hljs-number">2</span>) &#123;<br>    <span class="hljs-keyword">var</span> tabParameters = matches[i].<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;@&#x27;</span>);<br>    <span class="hljs-keyword">var</span> postContent   = matches[i + <span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">var</span> tabCaption    = tabParameters[<span class="hljs-number">0</span>] || <span class="hljs-string">&#x27;&#x27;</span>;<br>    <span class="hljs-keyword">var</span> tabIcon       = tabParameters[<span class="hljs-number">1</span>] || <span class="hljs-string">&#x27;&#x27;</span>;<br>    <span class="hljs-keyword">var</span> tabHref       = <span class="hljs-string">&#x27;&#x27;</span>;<br><br>    postContent = hexo.<span class="hljs-property">render</span>.<span class="hljs-title function_">renderSync</span>(&#123;<span class="hljs-attr">text</span>: postContent, <span class="hljs-attr">engine</span>: <span class="hljs-string">&#x27;markdown&#x27;</span>&#125;).<span class="hljs-title function_">trim</span>();<br><br>    tabId += <span class="hljs-number">1</span>;<br>    tabHref = (tabName + <span class="hljs-string">&#x27; &#x27;</span> + tabId).<span class="hljs-title function_">toLowerCase</span>().<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27; &#x27;</span>).<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;-&#x27;</span>);<br><br>    ((tabCaption.<span class="hljs-property">length</span> === <span class="hljs-number">0</span>) &amp;&amp; (tabIcon.<span class="hljs-property">length</span> === <span class="hljs-number">0</span>)) &amp;&amp; (tabCaption = tabName + <span class="hljs-string">&#x27; &#x27;</span> + tabId);<br><br>    <span class="hljs-keyword">var</span> isOnlyicon = tabIcon.<span class="hljs-property">length</span> &gt; <span class="hljs-number">0</span> &amp;&amp; tabCaption.<span class="hljs-property">length</span> === <span class="hljs-number">0</span> ? <span class="hljs-string">&#x27; style=&quot;text-align: center;&quot;&#x27;</span> : <span class="hljs-string">&#x27;&#x27;</span>;<br>    <br>    <span class="hljs-keyword">let</span> icon = tabIcon.<span class="hljs-title function_">trim</span>();<br>    icon = icon.<span class="hljs-title function_">startsWith</span>(<span class="hljs-string">&#x27;fa&#x27;</span>) ? icon : <span class="hljs-string">&#x27;fa fa-&#x27;</span> + icon;<br>    tabIcon.<span class="hljs-property">length</span> &gt; <span class="hljs-number">0</span> &amp;&amp; (tabIcon = <span class="hljs-string">`&lt;i class=&quot;<span class="hljs-subst">$&#123;icon&#125;</span>&quot;<span class="hljs-subst">$&#123;isOnlyicon&#125;</span>&gt;&lt;/i&gt;`</span>);<br><br>    <span class="hljs-keyword">var</span> isActive = (tabActive &gt; <span class="hljs-number">0</span> &amp;&amp; tabActive === tabId) || (tabActive === <span class="hljs-number">0</span> &amp;&amp; tabId === <span class="hljs-number">1</span>) ? <span class="hljs-string">&#x27; active&#x27;</span> : <span class="hljs-string">&#x27;&#x27;</span>;<br>    tabNav += <span class="hljs-string">`&lt;li class=&quot;tab<span class="hljs-subst">$&#123;isActive&#125;</span>&quot;&gt;&lt;button type=&quot;button&quot; data-href=&quot;#<span class="hljs-subst">$&#123;tabHref&#125;</span>&quot;&gt;<span class="hljs-subst">$&#123;tabIcon + tabCaption.trim()&#125;</span>&lt;/button&gt;&lt;/li&gt;`</span>;<br><br>    tabContent += <span class="hljs-string">`&lt;div class=&quot;tab-pane<span class="hljs-subst">$&#123;isActive&#125;</span>&quot; id=&quot;<span class="hljs-subst">$&#123;tabHref&#125;</span>&quot;&gt;<span class="hljs-subst">$&#123;postContent&#125;</span>&lt;/div&gt;`</span>;<br>  &#125;<br><br>  tabNav = <span class="hljs-string">`&lt;ul class=&quot;nav-tabs&quot;&gt;<span class="hljs-subst">$&#123;tabNav&#125;</span>&lt;/ul&gt;`</span>;<br>  tabContent = <span class="hljs-string">`&lt;div class=&quot;tab-content&quot;&gt;<span class="hljs-subst">$&#123;tabContent&#125;</span>&lt;/div&gt;`</span>;<br><br>  <span class="hljs-keyword">return</span> <span class="hljs-string">`&lt;div class=&quot;tabs&quot; id=&quot;<span class="hljs-subst">$&#123;tabName.toLowerCase().split(<span class="hljs-string">&#x27; &#x27;</span>).join(<span class="hljs-string">&#x27;-&#x27;</span>)&#125;</span>&quot;&gt;<span class="hljs-subst">$&#123;tabNav + tabContent&#125;</span>&lt;/div&gt;`</span>;<br>&#125;<br><br>hexo.<span class="hljs-property">extend</span>.<span class="hljs-property">tag</span>.<span class="hljs-title function_">register</span>(<span class="hljs-string">&#x27;tabs&#x27;</span>, postTabs, &#123;<span class="hljs-attr">ends</span>: <span class="hljs-literal">true</span>&#125;);<br>hexo.<span class="hljs-property">extend</span>.<span class="hljs-property">tag</span>.<span class="hljs-title function_">register</span>(<span class="hljs-string">&#x27;subtabs&#x27;</span>, postTabs, &#123;<span class="hljs-attr">ends</span>: <span class="hljs-literal">true</span>&#125;);<br>hexo.<span class="hljs-property">extend</span>.<span class="hljs-property">tag</span>.<span class="hljs-title function_">register</span>(<span class="hljs-string">&#x27;subsubtabs&#x27;</span>, postTabs, &#123;<span class="hljs-attr">ends</span>: <span class="hljs-literal">true</span>&#125;);<br></code></pre></td></tr></table></figure><p>该代码的作用就是扫描<code>markdown</code>文件中所有关于<code>tabs</code>的标签，并将其转换成对应的<code>HTML</code>块结构</p><h2 id="javascript关于生成的选项卡的点击切换逻辑"><a href="#javascript关于生成的选项卡的点击切换逻辑" class="headerlink" title="javascript关于生成的选项卡的点击切换逻辑"></a>javascript关于生成的选项卡的点击切换逻辑</h2><p>这个主要是为了将生成的html块添加切换功能，是需要生成对应的静态文件的，所以编写在 <code>/themes/fluid/source/js/</code> 目录下, 在这个目录下创建 <code>tabs.js</code> 用于添加切换功能逻辑代码，内容如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs js">  <span class="hljs-keyword">const</span> <span class="hljs-title function_">siblings</span> = (<span class="hljs-params">ele, selector</span>) =&gt; &#123;<br>    <span class="hljs-keyword">return</span> [...ele.<span class="hljs-property">parentNode</span>.<span class="hljs-property">children</span>].<span class="hljs-title function_">filter</span>(<span class="hljs-function">(<span class="hljs-params">child</span>) =&gt;</span> &#123;<br>      <span class="hljs-keyword">if</span> (selector) &#123;<br>        <span class="hljs-keyword">return</span> child !== ele &amp;&amp; child.<span class="hljs-title function_">matches</span>(selector)<br>      &#125;<br>      <span class="hljs-keyword">return</span> child !== ele<br>    &#125;)<br>  &#125;<br><br>  <span class="hljs-keyword">const</span> tabsFn = &#123;<br>    <span class="hljs-attr">clickFnOfTabs</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelectorAll</span>(<span class="hljs-string">&#x27; .tab &gt; button&#x27;</span>).<span class="hljs-title function_">forEach</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">item</span>) &#123;<br>        item.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) &#123;<br>          <span class="hljs-keyword">const</span> $this = <span class="hljs-variable language_">this</span> <span class="hljs-comment">// 当前按钮的父级 &lt;li&gt;</span><br>          <span class="hljs-keyword">const</span> $tabItem = $this.<span class="hljs-property">parentNode</span>  <span class="hljs-comment">// 导航栏 &lt;ul&gt;</span><br><br>          <span class="hljs-keyword">if</span> (!$tabItem.<span class="hljs-property">classList</span>.<span class="hljs-title function_">contains</span>(<span class="hljs-string">&#x27;active&#x27;</span>)) &#123;<br><br>            <span class="hljs-keyword">const</span> $tabContent = $tabItem.<span class="hljs-property">parentNode</span>.<span class="hljs-property">nextElementSibling</span><br>            <br>            <span class="hljs-comment">// 移除所有兄弟按钮的 active 类</span><br>            <span class="hljs-keyword">const</span> $siblings = <span class="hljs-title function_">siblings</span>($tabItem, <span class="hljs-string">&#x27;.active&#x27;</span>)[<span class="hljs-number">0</span>]<br>            $siblings &amp;&amp; $siblings.<span class="hljs-property">classList</span>.<span class="hljs-title function_">remove</span>(<span class="hljs-string">&#x27;active&#x27;</span>)<br><br>            <span class="hljs-comment">// 当前按钮添加 active 类</span><br>            $tabItem.<span class="hljs-property">classList</span>.<span class="hljs-title function_">add</span>(<span class="hljs-string">&#x27;active&#x27;</span>)<br><br>            <span class="hljs-keyword">const</span> tabId = $this.<span class="hljs-title function_">getAttribute</span>(<span class="hljs-string">&#x27;data-href&#x27;</span>).<span class="hljs-title function_">replace</span>(<span class="hljs-string">&#x27;#&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>)<br>            <span class="hljs-keyword">const</span> childList = [...$tabContent.<span class="hljs-property">children</span>]<br>            <br>            childList.<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> &#123;<br>              <span class="hljs-keyword">if</span> (item.<span class="hljs-property">id</span> === tabId) item.<span class="hljs-property">classList</span>.<span class="hljs-title function_">add</span>(<span class="hljs-string">&#x27;active&#x27;</span>)<br>              <span class="hljs-keyword">else</span> item.<span class="hljs-property">classList</span>.<span class="hljs-title function_">remove</span>(<span class="hljs-string">&#x27;active&#x27;</span>)<br>            &#125;)<br>          &#125;<br>        &#125;)<br>      &#125;)<br>    &#125;<br><br>&#125;<br>tabsFn.<span class="hljs-title function_">clickFnOfTabs</span>()<br></code></pre></td></tr></table></figure><p>之后需要告诉 <code>fluid</code> 添加自定义的 <code>js</code> 代码，即在 <code>_config.fluid.yml</code> 文件中找到自定义 <code>custom_js</code> 选项，将 <code>/js/tabs.js</code>添加:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">custom_js:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">/js/tabs.js</span><br></code></pre></td></tr></table></figure><h2 id="css样式美化操作"><a href="#css样式美化操作" class="headerlink" title="css样式美化操作"></a>css样式美化操作</h2><p>之后就需要对生成的 <code>HTML</code> 颜色样式进行编写代码，同理，这个是给生成静态文件的样式，所以写在 <code>/themes/fluid/source/css/</code> 目录下, 在这个目录下创建 <code>tabs.css</code> 用于添加切换功能逻辑代码，内容如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/* 主色调：低饱和橙黄 + 米白基底 */</span><br><span class="hljs-selector-pseudo">:root</span> &#123;<br>  <span class="hljs-attr">--nav-tabs-bg</span>: <span class="hljs-number">#fff3e0</span>;     <span class="hljs-comment">/* 米白背景 */</span><br>  <span class="hljs-attr">--primary</span>: <span class="hljs-number">#ffecb3</span>;         <span class="hljs-comment">/* 淡橙黄激活选项卡 */</span><br>  <span class="hljs-attr">--secondary</span>: <span class="hljs-number">#f7f9ee</span>;       <span class="hljs-comment">/* 浅青灰辅助色 */</span><br>  <br>  <span class="hljs-comment">/* 辅助色：冷灰与柔和蓝绿 */</span>  <br>  <span class="hljs-attr">--content-bg</span>: <span class="hljs-number">#ffffff</span>;      <span class="hljs-comment">/* 纯白内容区 */</span><br>  <span class="hljs-attr">--border</span>: <span class="hljs-number">#e9f5dc</span>;          <span class="hljs-comment">/* 浅黄绿边框 */</span><br>  <span class="hljs-attr">--activate-border</span>: <span class="hljs-number">#a8e9ed</span>; <span class="hljs-comment">/* 海沫绿选中边框 */</span><br>  <br>  <span class="hljs-comment">/* 文字色：深绿与中性灰 */</span>  <br>  <span class="hljs-attr">--text</span>: <span class="hljs-number">#6c757d</span>;            <span class="hljs-comment">/* 中性灰蓝文字 */</span><br>  <span class="hljs-attr">--active-text</span>: <span class="hljs-number">#2e647a</span>;     <span class="hljs-comment">/* 深森林绿选中） */</span><br>  <br>  <span class="hljs-comment">/* 投影与反馈：极淡透明色 */</span>  <br>  <span class="hljs-attr">--primary-shadow</span>: <span class="hljs-built_in">rgba</span>(<span class="hljs-number">255</span>, <span class="hljs-number">127</span>, <span class="hljs-number">80</span>, <span class="hljs-number">0.2</span>); <span class="hljs-comment">/* 半透明琥珀橙阴影 */</span><br>  <span class="hljs-attr">--shadow</span>: <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0.2</span>); <span class="hljs-comment">/* 极淡投影 */</span><br>  <span class="hljs-attr">--tab-button-hover</span>: <span class="hljs-number">#f6e4c6</span>; <span class="hljs-comment">/* 浅鲑鱼橙悬停反馈 */</span><br>&#125;<br><br><span class="hljs-comment">/* 容器基础样式 */</span><br><span class="hljs-selector-class">.tabs</span> &#123;<br>  <span class="hljs-attribute">max-width</span>: <span class="hljs-number">96%</span>;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">10px</span> auto;<br>  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">12px</span>;<br>  <span class="hljs-attribute">overflow</span>: hidden;<br>  <span class="hljs-attribute">box-shadow</span>: <span class="hljs-number">0</span> <span class="hljs-number">6px</span> <span class="hljs-number">12px</span> <span class="hljs-built_in">var</span>(--shadow);<br>&#125;<br><br><span class="hljs-comment">/* 导航栏布局优化 */</span><br><span class="hljs-selector-class">.nav-tabs</span> &#123;<br>  <span class="hljs-attribute">display</span>: flex;<br>  <span class="hljs-attribute">list-style</span>: none;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">var</span>(--nav-tabs-bg);<br>  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">12px</span> <span class="hljs-number">12px</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">box-shadow</span>: <span class="hljs-number">0</span> <span class="hljs-number">2px</span> <span class="hljs-number">6px</span> <span class="hljs-built_in">var</span>(--shadow);<br>&#125;<br><br><span class="hljs-comment">/* 移除列表项默认间距 */</span><br><span class="hljs-selector-class">.tabs</span> &gt; <span class="hljs-selector-tag">ul</span>&#123;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">/* 使用间隙替代边框分隔 */</span><br><span class="hljs-selector-class">.tabs</span> &gt; <span class="hljs-selector-tag">ul</span> &gt; <span class="hljs-selector-tag">li</span> &#123;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">/* 按钮样式统一 */</span><br><span class="hljs-selector-class">.tab</span> &#123;<br>  <span class="hljs-attribute">flex-shrink</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span> <span class="hljs-number">8px</span>; <span class="hljs-comment">/* 统一外边距 */</span><br>&#125;<br><br><span class="hljs-selector-class">.tab</span> &gt; <span class="hljs-selector-tag">button</span> &#123;<br>  <span class="hljs-attribute">position</span>: relative;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">8px</span> <span class="hljs-number">16px</span>;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">var</span>(--secondary);<br>  <span class="hljs-attribute">border</span>: none;<br>  <span class="hljs-attribute">cursor</span>: pointer;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">14px</span>;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-built_in">var</span>(--text);<br>  <span class="hljs-attribute">transition</span>: all <span class="hljs-number">0.3s</span> ease;<br>  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">12px</span> <span class="hljs-number">12px</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">border-right</span>: <span class="hljs-number">2px</span> solid <span class="hljs-built_in">var</span>(--border);<br>  <span class="hljs-attribute">border-left</span>: <span class="hljs-number">2px</span> solid <span class="hljs-built_in">var</span>(--border);<br>  <span class="hljs-attribute">border-top</span>: <span class="hljs-number">2px</span> solid <span class="hljs-built_in">var</span>(--border);<br>&#125;<br><br><br><span class="hljs-comment">/* 优化悬停效果 */</span><br><span class="hljs-selector-class">.tab</span> &gt; <span class="hljs-selector-tag">button</span><span class="hljs-selector-pseudo">:hover</span> &#123;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">var</span>(--tab-button-hover);<br>&#125;<br><br><span class="hljs-comment">/* 激活状态样式 */</span><br><span class="hljs-selector-class">.tab</span><span class="hljs-selector-class">.active</span> &gt; <span class="hljs-selector-tag">button</span>  &#123;<br>  <span class="hljs-comment">/* background: var(--content-bg); */</span><br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">var</span>(--primary);<br>  <span class="hljs-comment">/* color: , 字体颜色 */</span><br>  <span class="hljs-attribute">color</span>: <span class="hljs-built_in">var</span>(--active-text); <br>  <span class="hljs-attribute">border-right</span>: <span class="hljs-number">2px</span> solid <span class="hljs-built_in">var</span>(--activate-border);<br>  <span class="hljs-attribute">border-left</span>: <span class="hljs-number">2px</span> solid <span class="hljs-built_in">var</span>(--activate-border);<br>  <span class="hljs-attribute">border-top</span>: <span class="hljs-number">2px</span> solid <span class="hljs-built_in">var</span>(--activate-border);<br>  <span class="hljs-attribute">box-shadow</span>: inset <span class="hljs-number">0</span> -<span class="hljs-number">3px</span> <span class="hljs-number">0</span>  <span class="hljs-built_in">var</span>(--primary-shadow);<br>&#125;<br><br><span class="hljs-selector-class">.tab</span> &gt; <span class="hljs-selector-tag">button</span><span class="hljs-selector-class">.active</span><span class="hljs-selector-pseudo">:hover</span> &#123;<br>  <span class="hljs-attribute">background-position</span>: left bottom;<br>&#125;<br><br><span class="hljs-comment">/* 内容显示控制 */</span><br><span class="hljs-selector-class">.tab-pane</span> &#123;<br>  <span class="hljs-attribute">display</span>: none;<br>&#125;<br><br><span class="hljs-selector-class">.tab-pane</span><span class="hljs-selector-class">.active</span> &#123;<br>  <span class="hljs-attribute">display</span>: block;<br>&#125;<br><br><span class="hljs-comment">/* 内容区域样式 */</span><br><span class="hljs-selector-class">.tab-content</span> &#123;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">10px</span>;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">var</span>(--content-bg);<br>  <span class="hljs-attribute">border-top</span>: <span class="hljs-number">1px</span> solid <span class="hljs-built_in">var</span>(--border);<br>  <span class="hljs-attribute">border-bottom-left-radius</span>: <span class="hljs-number">5px</span>;<br>  <span class="hljs-attribute">border-bottom-right-radius</span>: <span class="hljs-number">5px</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>同理，在 <code>_config.fluid.yml</code> 文件中找到自定义 <code>custom_css</code> 选项，将 <code>/css/tabs.css</code>添加:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">custom_css:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">/css/tabs.css</span><br></code></pre></td></tr></table></figure><div class="note note-warn">            <p>其实这个不算完整，因为 <code>hexo</code> 有主题切换功能，即 <code>light</code> 和 <code>dark</code> 主题切换操作。我这个实现都用了同一套颜色，肯定是有问题的。其实切换实现原理也简单，只需要将上述中 <code>:root</code> 颜色配置写到 <code>themes\fluid\source\css\_pages\_base\color-schema.styl</code> 中, 并分别配置两套不同的颜色组合，然后再在 <code>/themes/fluid/source/css/tabs.css</code> 中使用即可。</p>          </div>]]></content>
    
    
    <categories>
      
      <category>技术栈</category>
      
      <category>博客</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hexo个性化扩展</title>
    <link href="/hexo-configuration.html"/>
    <url>/hexo-configuration.html</url>
    
    <content type="html"><![CDATA[<h1 id="主题配置"><a href="#主题配置" class="headerlink" title="主题配置"></a>主题配置</h1><p>在 <a href="https://hexo.io/themes/">Hexo官网</a> 主题有很多，我考虑使用<a href="https://hexo.fluid-dev.com/docs/guide/">Hexo Theme Fluid</a>主题。</p><p>为了后续自定义扩展（魔改）, 将 <a href="https://github.com/fluid-dev/hexo-theme-fluid/releases">最新release版本</a>对应的主题保存到<code>themes</code>目录下,然后在博客目录下创建<code>_config.fluid.yml</code>, 将主题<code>_config.yml</code>的内容复制进去。以后如果修改任何主题配置，都直接修改<code>_config.fluid.yml</code>就好，因为它的配置优先级是高于原<code>_config.yml</code>的。大部分Fluid支持的功能都可以参考<a href="https://hexo.fluid-dev.com/docs/guide/">主题配置指南</a>。</p><p>这里只对一些比较常用以及修改比较多的内容进行说明：</p><h2 id="代码高亮"><a href="#代码高亮" class="headerlink" title="代码高亮"></a>代码高亮</h2><p>通过配置项中的<code>lib</code>来选择生成给的高亮库，可选的有 <code>highlightjs</code> 和 <code>prismjs</code>,我个人选择 <code>highlightjs</code>，并将 <code>style</code> 修改为<code>an-old-hope</code> 风格, 在 <code>_config.fluid.yml</code> 配置文件中找到并修改内容：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">lib:</span> <span class="hljs-string">&quot;highlightjs&quot;</span><br><br><span class="hljs-attr">highlightjs:</span><br>  <span class="hljs-comment"># 在链接中挑选 style 填入</span><br>  <span class="hljs-comment"># Select a style in the link</span><br>  <span class="hljs-comment"># See: https://highlightjs.org/demo/</span><br>  <span class="hljs-attr">style:</span> <span class="hljs-string">&quot;an-old-hope&quot;</span><br>  <span class="hljs-attr">style_dark:</span> <span class="hljs-string">&quot;dark&quot;</span><br>  <span class="hljs-attr">bg_color:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p>在使用时候发现一款Mac风格代码块样式的方法，需要自定义样式来实现，即在<code>themes/fluid/source/css</code>目录下创建一个<code>mac.styl</code>的文件，并添加内容：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.highlight</span><br>    <span class="hljs-attribute">background</span>: <span class="hljs-number">#1C1D21</span><br>    border-radius: <span class="hljs-number">5px</span><br>    box-shadow: <span class="hljs-number">0</span> <span class="hljs-number">10px</span> <span class="hljs-number">30px</span> <span class="hljs-number">0</span> <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, .<span class="hljs-number">4</span>)<br>    padding-top: <span class="hljs-number">30px</span><br><br>    &amp;::before<br>      background: <span class="hljs-number">#fc625d</span><br>      border-radius: <span class="hljs-number">50%</span><br>      box-shadow: <span class="hljs-number">20px</span> <span class="hljs-number">0</span> <span class="hljs-number">#fdbc40</span>, <span class="hljs-number">40px</span> <span class="hljs-number">0</span> <span class="hljs-number">#35cd4b</span><br>      content: <span class="hljs-string">&#x27; &#x27;</span><br>      height: <span class="hljs-number">12px</span><br>      left: <span class="hljs-number">12px</span><br>      margin-top: -<span class="hljs-number">20px</span><br>      position: absolute<br>      width: <span class="hljs-number">12px</span><br></code></pre></td></tr></table></figure><p>然后需要在 <code>_config.fluid.yml</code> 文件中找到自定义 <code>custom_css</code> 选项，将 <code>/css/mac.css</code>添加:</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">custom_css:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">/css/mac.css</span><br></code></pre></td></tr></table></figure><blockquote><p>说明，这个虽然是在 <code>themes/fluid/source/css</code> 目录下，但是生成的静态文件，会将 <code>source</code> 下的内容都映射到根目录，所以配置时候用的目录为 <code>/css/</code>，对于以 <code>.css</code> 结尾也是同样道理。</p></blockquote><p>对于<strong>行内代码块</strong>的颜色, 默认的行内代码颜色和正文颜色是继承关系，且行内代码背景色不明显，因此视觉上难以区分。所以需要找到 <code>themes/fluid/source/css/_pages/_base/base.styl</code>文件中的 <code>code</code> 配置选项，改颜色为<code>#e96900</code></p><h2 id="评论插件"><a href="#评论插件" class="headerlink" title="评论插件"></a>评论插件</h2><p>由于 <code>fluid</code> 主题默认已经继承了 <code>Valine</code> 评论插件，因此只需要配置即可: 进入<a href="https://leancloud.app/">LeanCloud</a>官网完成注册，在控制台创建一个结构化数据 <code>Blog.Comments</code> 的 <code>Class</code>, 得到密钥（<code>App ID</code> 和 <code>App Key</code>），在 <code>_config.fluid.yml</code> 中配置即可。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">leancloud:</span><br>  <span class="hljs-attr">app_id:</span> <span class="hljs-string">xxx</span> <span class="hljs-comment"># App ID 填写地方</span><br>  <span class="hljs-attr">app_key:</span> <span class="hljs-string">xxx</span> <span class="hljs-comment"># App Key填写地方</span><br>  <span class="hljs-comment"># REST API 服务器地址，国际版不填</span><br>  <span class="hljs-comment"># Only the Chinese mainland users need to set</span><br>  <span class="hljs-attr">server_url:</span>  <span class="hljs-string">xxxx</span><br>  <span class="hljs-comment"># 统计页面时获取路径的属性</span><br>  <span class="hljs-comment"># Get the attribute of the page path during statistics</span><br>  <span class="hljs-attr">path:</span> <span class="hljs-string">window.location.pathname</span><br>  <span class="hljs-comment"># 开启后不统计本地路径( localhost 与 127.0.0.1 )</span><br>  <span class="hljs-comment"># If true, ignore localhost &amp; 127.0.0.1</span><br>  <span class="hljs-attr">ignore_local:</span> <span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure><p>当然，需要注意：</p><ol><li>这个 <code>App ID</code> 和 <code>App Key</code> 可以使用我的，那么所有的评论数据和统计数据都会写入我的数据库中。</li><li>国际版相比于国内版，不需要实名认证；除此之外，国际版<a href="https://leancloud.app/">LeanCloud</a>需要邮箱认证，如果没收到邮件，查看是否被当成了垃圾邮箱拦截了。</li><li><code>us.avoscloud.com</code>这个域名被弃用了，所以需要修改对应的域名地址，进入<a href="https://console.leancloud.app/apps">LeanCloud</a>，然后进入应用，<code>设置 -&gt; 应用凭证</code>，复制<strong>REST API 服务器地址</strong>，找到博客主题中的关于<code>valine</code>部分，修改其中的关于<code>us.avoscloud.com</code>的域名。</li></ol><p>   <img src="/img/assets/hexo%E4%B8%AA%E6%80%A7%E5%8C%96%E6%89%A9%E5%B1%95/leancloud.png" alt="us.leancloud.cn地址无法解析"></p><ol start="4"><li>除此之外，国际版对中国 <code>ip</code> 有屏蔽，所以如果评论地址是国内<code>ip</code>，那么是访问不到的（解决方案就是使用国内的<code>LeanCloud</code>，不过算了，不折腾了）</li></ol><h2 id="Latex-数学公式"><a href="#Latex-数学公式" class="headerlink" title="Latex 数学公式"></a>Latex 数学公式</h2><p>这个在 <code>fluid</code> 主题中也有了，直接配置即可：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-comment"># 数学公式，开启之前需要更换 Markdown 渲染器，否则复杂公式会有兼容问题，具体请见：https://hexo.fluid-dev.com/docs/guide/##latex-数学公式</span><br><span class="hljs-comment"># Mathematical formula. If enable, you need to change the Markdown renderer, see: https://hexo.fluid-dev.com/docs/en/guide/#math</span><br><span class="hljs-attr">math:</span><br>  <span class="hljs-comment"># 开启后文章默认可用，自定义页面如需使用，需在 Front-matter 中指定 `math: true`</span><br>  <span class="hljs-comment"># If you want to use math on the custom page, you need to set `math: true` in Front-matter</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br><br>  <span class="hljs-comment"># 开启后，只有在文章 Front-matter 里指定 `math: true` 才会在文章页启动公式转换，以便在页面不包含公式时提高加载速度</span><br>  <span class="hljs-comment"># If true, only set `math: true` in Front-matter will enable math, to load faster when the page does not contain math</span><br>  <span class="hljs-attr">specific:</span> <span class="hljs-literal">false</span><br><br>  <span class="hljs-comment"># Options: mathjax | katex</span><br>  <span class="hljs-attr">engine:</span> <span class="hljs-string">mathjax</span><br></code></pre></td></tr></table></figure><h1 id="关于页的编写"><a href="#关于页的编写" class="headerlink" title="关于页的编写"></a>关于页的编写</h1><p>这个是通过 <code>page</code> 布局来实现的，所以需要自己创建一个：</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">hexo <span class="hljs-keyword">new</span> page about<br></code></pre></td></tr></table></figure><p>然后在 <code>about/index.md</code>文件中的 <code>Front-matter</code> 里面添加 <code>layout</code> 属性布局：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">layout:</span> <span class="hljs-string">about</span><br></code></pre></td></tr></table></figure><p>之后一些内容可以在 <code>_config.fluid.yml</code> 配置文件中进行相关配置（剩下的就是<code>about/index.md</code> 文件的编写）：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment">#---------------------------</span><br><span class="hljs-comment"># 关于页</span><br><span class="hljs-comment"># About Page</span><br><span class="hljs-comment">#---------------------------</span><br><span class="hljs-attr">about:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">banner_img:</span> <span class="hljs-string">/img/default.png</span><br>  <span class="hljs-attr">banner_img_height:</span> <span class="hljs-number">60</span><br>  <span class="hljs-attr">banner_mask_alpha:</span> <span class="hljs-number">0.3</span><br>  <span class="hljs-attr">avatar:</span> <span class="hljs-string">/img/avatar.png</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">&quot;Fluid&quot;</span><br>  <span class="hljs-attr">intro:</span> <span class="hljs-string">&quot;An elegant theme for Hexo&quot;</span><br>  <span class="hljs-comment"># 更多图标可从 https://hexo.fluid-dev.com/docs/icon/ 查找，`class` 代表图标的 css class，添加 `qrcode` 后，图标不再是链接而是悬浮二维码</span><br>  <span class="hljs-comment"># More icons can be found from https://hexo.fluid-dev.com/docs/en/icon/  `class` is the css class of the icon. If adding `qrcode`, the icon is no longer a link, but a hovering QR code</span><br><br>  <span class="hljs-attr">icons:</span><br>    <span class="hljs-bullet">-</span> &#123; <span class="hljs-attr">class:</span> <span class="hljs-string">&quot;iconfont icon-github-fill&quot;</span>, <span class="hljs-attr">link:</span> <span class="hljs-string">&quot;https://github.com&quot;</span>, <span class="hljs-attr">tip:</span> <span class="hljs-string">&quot;GitHub&quot;</span> &#125;<br>    <span class="hljs-bullet">-</span> &#123; <span class="hljs-attr">class:</span> <span class="hljs-string">&quot;iconfont icon-douban-fill&quot;</span>, <span class="hljs-attr">link:</span> <span class="hljs-string">&quot;https://douban.com&quot;</span>, <span class="hljs-attr">tip:</span> <span class="hljs-string">&quot;豆瓣&quot;</span> &#125;<br>    <span class="hljs-bullet">-</span> &#123; <span class="hljs-attr">class:</span> <span class="hljs-string">&quot;iconfont icon-wechat-fill&quot;</span>, <span class="hljs-attr">qrcode:</span> <span class="hljs-string">&quot;/img/favicon.png&quot;</span> &#125;<br></code></pre></td></tr></table></figure><h1 id="插入图片的问题"><a href="#插入图片的问题" class="headerlink" title="插入图片的问题"></a>插入图片的问题</h1><div class="note note-success">            <p>在介绍插入图片之前，需要了解下 <code>Hexo</code> 的大致实现原理，以<code>post</code>布局为例（当然，如果使用图床这种方式插入图片，那么这个可以略过）</p>          </div><p><code>hexo</code> 的原理就是将 <code>/source/_posts</code>目录下的<code>*.md</code> 文件通过渲染，配合各种 <code>css</code>, <code>js</code> 生成一堆的静态资源（可通过<code>hexo g</code> 在 <code>/public/</code> 目录下查看）。在搜索 <code>/source/_posts</code> 目录的时候只会考虑 <code>*.md</code> 文件，并且在生成过程中，这些图片的相对路径起始点是相对于 <code>/source/</code> 目录而言的。也就是说，如果图片放在 <code>/source/_posts</code> 目录下不会生成图片静态资源（在 <code>/public/</code> 目录下无法找到图片）, 因此需要将图片放到 <code>/source/</code> 目录且不属于文章扫描目录下。</p><p>举例说明下，一些文件目录结构如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash">├─<span class="hljs-built_in">source</span><br>│  ├─img<br>│  │  ├─index.png<br>│  │  └─post.png<br>│  └─_posts<br>│      ├─文章1.md <span class="hljs-comment"># 文章1</span><br>│      ├─fold1<br>│      │  ├─文章2.md <span class="hljs-comment"># 文章2</span><br>│      │  ├─post_fold_img <span class="hljs-comment"># _posts目录下fold1路径的图片路径，不可见</span><br>│      │  │   ├─post_fold_index.png<br>│      │  │   └─post_fold.png<br>│      └─post_img <span class="hljs-comment"># _posts目录下图片路径, 不可见</span><br>│         └─post_index.png<br></code></pre></td></tr></table></figure><p>认知如下:</p><ol><li>对于 <code>/source/_posts/</code> 目录下的图片如 <code>/source/_posts/post_img/post_index.png</code> , <code>/source/_posts/fold1/post_fold_img/*.png</code> 使用 <code>hexo g</code> 生成后的静态资源中，这些图片是不存在的</li><li>对于 <code>/source/img/index.png</code> 和 <code>/source/img/post.png</code> 使用 <code>hexo g</code> 生成后的静态资源中图片会被保存在 <code>/img/index.png</code> 和 <code>/img/index.png</code> 中。</li></ol><p>因此，如果使用相对路径来插入图片，那么就需要考虑生成前和生成后图片的路径问题。</p><p>当然，我这里使用的是 <code>vscode</code> 来进行编写的，插入图片可以将图片插入到 <code>/source/img/</code> 目录下，然后通过 <code>vscode</code> 中图片路径映射来实现（我使用规则为 <code>/source/img/blog/:title/image_name.png</code> 的命名规范方式），具体而言：在 <code>vscode</code> 设置中找到 <code>markdown.copyFiles.destination</code> 配置，修改为：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-attr">&quot;markdown.copyFiles.destination&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;**/*&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;$&#123;documentWorkspaceFolder&#125;/source/img/assets/$&#123;documentBaseName&#125;/&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><blockquote><p>其实最好的方式就是使用<strong>图床</strong>，这样，当插入图片多起来了的时候，就不会导致整个项目臃肿而卡顿。这个等有时间再说吧。</p></blockquote><h1 id="原内容同步到GitHub上"><a href="#原内容同步到GitHub上" class="headerlink" title="原内容同步到GitHub上"></a>原内容同步到GitHub上</h1><p>使用 <code>hexo</code> 自带的 <code>hexo d</code> 命令同步数据是将生成的<strong>静态资源</strong>进行同步，对于原手稿（<code>*.md</code>，自己博客配置）等内容则还是保存在本地，所以需要使用git来对原内容进行管理。除此之外如果新建一个分支来保存原内容，则有点冗余，这里借用 <code>git</code> 分支操作来区分管理。</p><p>首先创建一个用于保存源文件的分支 <code>source</code>，然后更改该分支为默认分支（之后所有的源文件则是依靠 <code>git</code> 与该分支进行同步）。在文件中添加 <code>.gitignore</code> 文件，并忽略掉一些无关的配置文件内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">.DS_Store<br>Thumbs.db<br>db.json<br>*.<span class="hljs-built_in">log</span><br>node_modules/<br>public/<br>.deploy*/<br></code></pre></td></tr></table></figure><h1 id="域名配置"><a href="#域名配置" class="headerlink" title="域名配置"></a>域名配置</h1><p>可以通过 GitHub Pages 域名进行访问，但也可以自己在 <a href="https://dc.console.aliyun.com/#/overview">阿里云</a>购买一个域名，然后进行配置，使其能够被解析到博客域名中，具体流程如下：</p><ol><li>在 <a href="https://dc.console.aliyun.com/#/overview">阿里云</a> 注册一个账号，并实名认证后购买一个域名</li><li>打开域名控制台，进入 <strong>域名解析</strong> ,添加两类记录：<ul><li>主机记录：@，记录类型：A， 记录值为 <code>GitHub Pages</code> 域名的 <code>IP</code> 地址</li><li>主机记录：www , 记录类型：CNAME ， 记录值为 <code>GitHub Pages</code> 域名</li></ul></li></ol><p>  <img src="/img/assets/hexo%E4%B8%AA%E6%80%A7%E5%8C%96%E6%89%A9%E5%B1%95/image.png" alt="域名配置"></p><ol start="3"><li>在路径 <code>/source</code> 目录下新建一个 <code>CNAME</code> 文件，里面填写域名即可</li><li><code>GitHub</code> 中打开对应的仓库，在 <code>Setting</code> 中找到 <code>Pages</code> ，添加 <code>Custom Domain</code> 为新买的域名，旁边一个 <code>Enforce HTTPS</code> 勾选，然后网站就是 <code>https</code> 协议了。</li></ol><h1 id="网站优化"><a href="#网站优化" class="headerlink" title="网站优化"></a>网站优化</h1><h2 id="搜索路径优化"><a href="#搜索路径优化" class="headerlink" title="搜索路径优化"></a>搜索路径优化</h2><p><code>Hexo</code> 博客默认的文章路径是 <code>域名/年/月/日/文章标题</code>，这样的多层目录搜索引擎爬虫爬起来非常费力，b并且平时查阅起来也很困难，因此需要优化文章的 <code>URL</code> 路径：打开<code>_config.yml</code>，找到 <code>permalink</code> 项，将 <code>:year/:month/:day/:title/</code> 修改为 <code>:name.html</code>，就可以用 <code>域名/文章标题</code> 访问了。</p><blockquote><p><code>:title</code> 和 <code>:name</code> 的区别是：前者访问时会保留相对于 <code>_post</code> 目录的路径，改成后者后就是纯粹的文章标题。</p></blockquote><p>此外，还可以将其中的 <code>pretty_url</code> 项中的两个 <code>true</code> 改为 <code>false</code> 用于处理 <code>URL</code> 的文章标题：两项分别是去除连接中的后缀 <code>index.html</code> 和 <code>.html</code> 的。</p><h2 id="添加百度-谷歌收录"><a href="#添加百度-谷歌收录" class="headerlink" title="添加百度&#x2F;谷歌收录"></a>添加百度&#x2F;谷歌收录</h2><p>由于 <code>Github Pages</code> 禁止了百度爬虫，所以百度引擎搜索是无法爬取到文章的，因此需要配置一下：</p><ol><li><p>进入 进入<a href="https://ziyuan.baidu.com/linksubmit/url">百度搜索提交入口</a> 或 <a href="https://search.google.com/search-console/welcome?hl=zh-CN&utm_source=wmx&utm_medium=deprecation-pane&utm_content=home">Google搜索提交入口</a>，这里选择使用google搜索引擎，因为百度引擎需要实名认证，有点麻烦。</p></li><li><p>输入网站后，需要验证对网站的所有权，这里选择使用 <code>HTML</code>标签验证的方式，打开<code>themes/fluid/layout/_partial/head.ejs</code> 文件，将验证标签放入 <code>&lt;head&gt;&lt;/head&gt;</code>中添加：</p>  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;google-site-verification&quot;</span> <span class="hljs-attr">content</span> =<span class="hljs-string">&quot;******&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>重新 <code>hexo d</code> 后，等待数分钟，点击完成验证，就会出现成功提示。</p></li></ol><p>可参考: <a href="https://www.cnblogs.com/ywang-wnlo/p/Hexo-SEO.html">https://www.cnblogs.com/ywang-wnlo/p/Hexo-SEO.html</a></p>]]></content>
    
    
    <categories>
      
      <category>技术栈</category>
      
      <category>博客</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hexo博客搭建</title>
    <link href="/hexo-helloworld.html"/>
    <url>/hexo-helloworld.html</url>
    
    <content type="html"><![CDATA[<div class="note note-success">            <p>谨以此文纪念该网站的诞生。<br>博客的搭建是基于 Hexo + GitHub Page，并采用了Fluid主题。</p><p>而写博客的难点，则在于如何把<strong>网状的思考，用树状结构，体现在线性展开的语句中</strong>。这也正是搭建该站点的初衷。</p>          </div><h1 id="搭建经历"><a href="#搭建经历" class="headerlink" title="搭建经历"></a>搭建经历</h1><h2 id="1-安装Node-js"><a href="#1-安装Node-js" class="headerlink" title="1. 安装Node.js"></a>1. 安装Node.js</h2><p>参考官网：<a href="https://nodejs.org/en/">Node.js — Run JavaScript Everywhere</a></p><p>安装完成后，在 <code>cmd</code> 或者 <code>bash</code> 中输入 <code>node -v</code> 查看版本。</p><p>一个需要注意的点: 在 <code>Windows</code> 系统中，默认情况下 <code>npm</code> 的全局依赖包和缓存文件会安装在 <code>C盘</code> 的默认路径下（可通过 <code>npm root -g</code> 查看）。若需将这些目录迁移至其他磁盘（例如 D 盘），需执行以下操作：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm config <span class="hljs-built_in">set</span> prefix=<span class="hljs-string">&quot;D:\\download\\nodejs\\node_global&quot;</span><br>npm config <span class="hljs-built_in">set</span> cache=<span class="hljs-string">&quot;D:\\download\\nodejs\\node_cache&quot;</span><br></code></pre></td></tr></table></figure><p>通过命令<code>npm config ls</code>查看相关配置（这个配置在<code>C:\User\用户\.npmrc</code>文件中），除此之外，为了能够在<code>cmd</code>中使用<code>npm</code>安装的包的相关命令，需要将上述<code>prefix</code>目录添加到 <code>PATH</code> 环境变量中。</p><h2 id="2-注册GitHub，并创建GitHub-Page仓库"><a href="#2-注册GitHub，并创建GitHub-Page仓库" class="headerlink" title="2. 注册GitHub，并创建GitHub Page仓库"></a>2. 注册GitHub，并创建GitHub Page仓库</h2><p>注册完<code>github</code>后，创建一个仓库（其中的 <code>&#123;github_username&#125;</code> 是注册用户的名称）:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">https://github.com/&#123;github_username&#125;/&#123;github_username&#125;.github.io<br></code></pre></td></tr></table></figure><p>此时可以在浏览器中访问域名：<code>https://&#123;github_username&#125;.github.io</code></p><blockquote><p>注意：如果创建的仓库取了其他名字，那么访问的域名则是：<code>https://用户名.github.io/仓库名/</code></p></blockquote><h2 id="3-下载Git"><a href="#3-下载Git" class="headerlink" title="3. 下载Git"></a>3. 下载Git</h2><p>安装Git，参考官网：<a href="https://git-scm.com/">Git</a></p><p>配置全局（<code>--global</code>）的个人信息:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git config --global user.name <span class="hljs-string">&quot;xxx&quot;</span><br>git config --global user.email <span class="hljs-string">&quot;xxxxx@google.com&quot;</span><br></code></pre></td></tr></table></figure><p>可以通过 <code>git config --global --list</code> 查看全局的 <code>git</code> 配置。</p><h2 id="4-配置GitHub-SSH"><a href="#4-配置GitHub-SSH" class="headerlink" title="4. 配置GitHub SSH"></a>4. 配置GitHub SSH</h2><p>如果需要将本地代码同步到 <code>GitHub</code> 上，需要使用<code>Git</code>与远程仓库建立安全连接，那么后续 <code>push/pull</code> 仓库时就不需要重复输入密码了。在2021年8月13号之后，HTTPS的建立安全连接方式被github停止使用了,并且官方推荐使用SSH协议的方式登录GitHub。</p><p>本地生成一个<strong>私钥-公钥对</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh-keygen -t rsa -b 4096  -C <span class="hljs-string">&quot;xxx@qq.com&quot;</span><br></code></pre></td></tr></table></figure><p>参数详解：</p><ul><li><code>-t</code> : 指定加密算法类型，这里指定使用 <code>RSA</code> 算法生成密钥</li><li><code>-b</code> : 指定密钥的位数</li><li><code>-C</code> : 添加注释(<code>--comment</code>)</li></ul><p>完成后，会在一个提示目录下找到公钥文件（默认是<code>~\.ssh\id_rsa.pub</code>）,在 <code>GitHub</code> 的设置中找到SSH，并将生成的公钥内容添加相关的Key中。配置完成后在本地通过命令检测是否配置成功：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh -T git@github.com<br><span class="hljs-comment"># 运行结果出现类似如下即表示成功</span><br><span class="hljs-comment"># Hi &#123;github_username&#125;! You&#x27;ve successfully authenticated, but GitHub does not provide shell access.</span><br></code></pre></td></tr></table></figure><h2 id="5-安装Hexo"><a href="#5-安装Hexo" class="headerlink" title="5. 安装Hexo"></a>5. 安装Hexo</h2><p>参考官网：<a href="https://hexo.io/zh-cn/">Hexo</a></p><p>在电脑中新建 <code>Blog</code> 文件夹，如 <code>D:\Blog</code>。在 <code>cmd</code> 命令行打开D盘，用 <code>cd Blog</code>命令进入 <code>Blog子目录</code>。</p><p>根据 <a href="https://hexo.io/zh-cn/">Hexo 官网</a> 上提示的全局安装命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install hexo-cli -g<br></code></pre></td></tr></table></figure><p>输入初始化部署命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 或者进入一个空文件目录，然后使用hexo init</span><br>hexo init blog_test<br></code></pre></td></tr></table></figure><p>即可在 <code>Blog目录下</code> 新建博客文件夹 <code>blog_test</code>，然后 <code>cd blog_test</code> 进入博客子目录，然后安装 <code>Node.js</code> 包管理器命令，安装所有依赖：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install<br></code></pre></td></tr></table></figure><p>输入生成本地预览命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo s<br><br><span class="hljs-comment"># 或者</span><br>hexo server<br></code></pre></td></tr></table></figure><p>默认会生成 <code>localhost:4000</code> 端口的网址，在浏览器中可以访问。</p><p><img src="/img/assets/hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/Pasted_image_20250507232450.png" alt="localhost:4000"></p><h2 id="6-安装编辑器"><a href="#6-安装编辑器" class="headerlink" title="6. 安装编辑器"></a>6. 安装编辑器</h2><p>主要是用于编写文档和修改配置，可以选择使用 <code>VsCode</code> （其他的也可以）。直接按照 <code>MarkDown</code>的语法规则编写内容即可（当然也可以直接用 <code>HTML</code> 语法规则编写内容）。</p><p>内容编写完成后，可依此执行用于 清理缓存、生成博客文件、生成本地预览 的命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo cl <span class="hljs-comment"># 或者 hexo clean</span><br><br>hexo g <span class="hljs-comment"># 或者 hexo generate</span><br><br>hexo s <span class="hljs-comment"># 或者 hexo server</span><br></code></pre></td></tr></table></figure><p>在启动完服务后，即可在浏览器中查看相关生成内容的预览。</p><h2 id="7-将-Hexo-发布到-GitHub-仓库"><a href="#7-将-Hexo-发布到-GitHub-仓库" class="headerlink" title="7. 将 Hexo 发布到 GitHub 仓库"></a>7. 将 Hexo 发布到 GitHub 仓库</h2><p>参考 <a href="https://hexo.io/zh-cn/docs/one-command-deployment#Git">Hexo git 一键部署</a>内容：打开整个项目根目录中的 <code>_config.yml</code>，更改有关参数：</p><ul><li><code>#Site</code>: 站点的描述内容（自行修改）</li><li><code>#URL</code>:部分，这个是站点链接，如果绑定了域名改为相关域名即可，否则直接用<code>GitHub Page</code>的域名</li><li><code>#Deployment</code><ul><li><code>type</code>: 改为 <code>git</code></li><li><code>repo</code>: 改为 <code>GitHub</code>仓库地址</li><li><code>branch</code>: 改为<code>main</code></li></ul></li></ul><p>安装部署插件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install hexo-deployer-git --save<br></code></pre></td></tr></table></figure><p>之后执行命令即可将 <code>Hexo</code> 内容发布到 <code>GitHub</code> 仓库中:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo d <span class="hljs-comment"># 或者 hexo deploy</span><br></code></pre></td></tr></table></figure><blockquote><p>同步主要是 <code>#Deployment</code> 内容的修改,执行同步命令后，将 <code>hexo g</code> 生成的静态文件（默认是<code>public</code>目录下）同步推送到<code>repo</code>指定的<code>GitHub</code>仓库地址，并且指定分支为<code>branch</code>的内容。而使用<code>GitHub Page</code>的话，默认使用<code>main</code>分支。</p></blockquote><h1 id="Hexo的基础使用"><a href="#Hexo的基础使用" class="headerlink" title="Hexo的基础使用"></a>Hexo的基础使用</h1><h2 id="1-新建文章："><a href="#1-新建文章：" class="headerlink" title="1. 新建文章："></a>1. 新建文章：</h2><p>使用命令（因为默认布局是文章<code>post</code>）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo new <span class="hljs-string">&quot;文章名&quot;</span> <span class="hljs-comment"># 也可以hexo n &quot;文章名&quot;</span><br></code></pre></td></tr></table></figure><p>文章名可以自由更改，新建后会在<code>/source/_posts</code> 创建一个 <code>文章名.md</code> 的文件，文章名不需要文件后缀，会自动生成 <code>Markdown</code> 文件，且带有预先定义的参数（在 <code>Front-matter</code> 中），如标题、日期、标签等。</p><blockquote><p>这个 <code>Front-matter</code> 可参考<a href="https://hexo.io/zh-cn/docs/front-matter">Front-matter | Hexo</a> , 就是配置一些渲染设置，文章分类标签，创建时间等等内容。</p></blockquote><h2 id="2-布局管理"><a href="#2-布局管理" class="headerlink" title="2. 布局管理"></a>2. 布局管理</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo new [layout] <span class="hljs-string">&quot;文章名&quot;</span> <span class="hljs-comment"># 也可以hexo n [layout] &quot;文章名&quot;</span><br></code></pre></td></tr></table></figure><p>其中，<code>layout</code> 可替换为 <code>post</code>（文章，默认）、<code>draft</code>（草稿）、<code>page</code>（页面）。对于这三种布局，有默认的三种<code>Front-matter</code>模板（在 <code>scafflolds</code> 路径下）,可以提前修改相关的 <code>Front-matter</code> 模板。</p><p>对于三种布局，个人感觉最大的区别在于：</p><ul><li>文章 <code>post</code>，在<code>_posts</code>目录下创建一个 <code>title.md</code> 文件。</li><li>页面 <code>page</code>，在<code>source</code>目录下创建一个 <code>title</code> 的文件夹，然后在里面创建一个<code>index.md</code>，</li><li>草稿 <code>draft</code>，在<code>source</code>目录下的<code>_drafts</code>目录，创建一个 <code>title.md</code> 文件</li></ul><h2 id="3-分类和标签"><a href="#3-分类和标签" class="headerlink" title="3. 分类和标签"></a>3. 分类和标签</h2><p>在Hexo中，分类和标签有着明显的区别：<strong>分类具有顺序性和层次性，而标签没有顺序和层次</strong>。</p><p>一般分类和标签主要是写在<code>Front-matter</code>内容中，如本文章的设置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">categories: <br>  - 技术栈<br>  - 博客 <br>tags:<br>  - Hexo<br>  - Git<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>技术栈</category>
      
      <category>博客</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  
  
  
  <entry>
    <title>about</title>
    <link href="/"/>
    <url>/</url>
    
    <content type="html"><![CDATA[<p>这个是关于我的介绍，后面慢慢写吧</p><h1 id="经历"><a href="#经历" class="headerlink" title="经历"></a>经历</h1>]]></content>
    
  </entry>
  
  
  
</search>
